{{- define "import" }}
	"math/rand"
	"github.com/mattn/go-sqlite3"
{{ end -}}

{{- define "is-constraint-error" }}
func (impl {{ .Receiver }}) isConstraintError(err error) (
	constraint string, ok bool) {
	if e, ok := err.(sqlite3.Error); ok {
			if e.Code == sqlite3.ErrConstraint {
				msg := err.Error()
				colon := strings.LastIndex(msg, ":")
				if colon != -1 {
					return strings.TrimSpace(msg[colon:]), true
				}
				return "", true
			}
	}
	return "", false
}
{{ end -}}

{{- define "open" }}
var sqlite3DriverName = func() string {
	var id [32]byte
	rand.Read(data[:])
	return "sqlite3_" + string(data)
}()

func init() {
	sql.Register(sqlite3DriverName, &sqlite3.SQLiteDriver{
		ConnectHook: sqlite3SetupConn,
	})
}

// SQLite3JournalMode controls the journal_mode pragma for all new connections.
// Since it is read without a mutex, it must be changed to the value you want
// before any Open calls.
var SQLite3JournalMode = "WAL"

func sqlite3SetupConn(conn *sqlite3.SQLiteConn) (err error) {
	_, err = conn.Exec("PRAGMA foreign_keys = ON", nil)
	if err != nil {
		return makeErr(err)
	}
	_, err = conn.Exec("PRAGMA journal_mode = " + SQLite3JournalMode, nil)
	if err != nil {
		return makeErr(err)
	}
	return nil
}

func opensqlite3(source string) (*sql.DB, error) {
	return sql.Open(sqlite3DriverName, source)
}
{{ end -}}